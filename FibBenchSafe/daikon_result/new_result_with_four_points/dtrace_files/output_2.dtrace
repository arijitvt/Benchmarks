input-language C/C++
decl-version 2.0
var-comparability none

ppt ..t1():::ENTER
  ppt-type enter
  variable ::i
    var-kind variable
    rep-type int
    dec-type int
  variable ::j
    var-kind variable
    rep-type int
    dec-type int
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..t1():::EXIT0
  ppt-type subexit
  variable ::i
    var-kind variable
    rep-type int
    dec-type int
  variable ::j
    var-kind variable
    rep-type int
    dec-type int
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..t2():::ENTER
  ppt-type enter
  variable ::i
    var-kind variable
    rep-type int
    dec-type int
  variable ::j
    var-kind variable
    rep-type int
    dec-type int
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..t2():::EXIT0
  ppt-type subexit
  variable ::i
    var-kind variable
    rep-type int
    dec-type int
  variable ::j
    var-kind variable
    rep-type int
    dec-type int
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..main():::ENTER
  ppt-type enter
  variable ::i
    var-kind variable
    rep-type int
    dec-type int
  variable ::j
    var-kind variable
    rep-type int
    dec-type int
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::i
    var-kind variable
    rep-type int
    dec-type int
  variable ::j
    var-kind variable
    rep-type int
    dec-type int
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

input-language C/C++
decl-version 2.0
var-comparability none


..main():::ENTER
this_invocation_nonce
0
::i
3
1
::j
3
1
argc
1
1
argv
0x7fefffdb8
1
argv[..]
[ "./output" ]
1

..t2():::ENTER
this_invocation_nonce
1
::i
3
1
::j
3
1
arg
0x0
1
arg[..]
nonsensical
2

..t2():::EXIT0
this_invocation_nonce
1
::i
3
1
::j
18
1
arg
0x0
1
arg[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..t1():::ENTER
this_invocation_nonce
2
::i
3
1
::j
18
1
arg
0x0
1
arg[..]
nonsensical
2

..t1():::EXIT0
this_invocation_nonce
2
::i
93
1
::j
18
1
arg
0x0
1
arg[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..main():::EXIT0
this_invocation_nonce
0
::i
93
1
::j
18
1
argc
1
1
argv
0x7fefffdb8
1
argv[..]
[ "./output" ]
1
return
0
1
