input-language C/C++
decl-version 2.0
var-comparability none

ppt ..funcA():::ENTER
  ppt-type enter
  variable ::iTThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::iRThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::data1Value
    var-kind variable
    rep-type int
    dec-type int
  variable ::data2Value
    var-kind variable
    rep-type int
    dec-type int
  variable param
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable param[..]
    var-kind array
    enclosing-var param
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..funcA():::EXIT0
  ppt-type subexit
  variable ::iTThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::iRThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::data1Value
    var-kind variable
    rep-type int
    dec-type int
  variable ::data2Value
    var-kind variable
    rep-type int
    dec-type int
  variable param
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable param[..]
    var-kind array
    enclosing-var param
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..funcB():::ENTER
  ppt-type enter
  variable ::iTThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::iRThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::data1Value
    var-kind variable
    rep-type int
    dec-type int
  variable ::data2Value
    var-kind variable
    rep-type int
    dec-type int
  variable param
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable param[..]
    var-kind array
    enclosing-var param
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..funcB():::EXIT0
  ppt-type subexit
  variable ::iTThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::iRThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::data1Value
    var-kind variable
    rep-type int
    dec-type int
  variable ::data2Value
    var-kind variable
    rep-type int
    dec-type int
  variable param
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable param[..]
    var-kind array
    enclosing-var param
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..main():::ENTER
  ppt-type enter
  variable ::iTThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::iRThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::data1Value
    var-kind variable
    rep-type int
    dec-type int
  variable ::data2Value
    var-kind variable
    rep-type int
    dec-type int
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::iTThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::iRThreads
    var-kind variable
    rep-type int
    dec-type int
  variable ::data1Value
    var-kind variable
    rep-type int
    dec-type int
  variable ::data2Value
    var-kind variable
    rep-type int
    dec-type int
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

input-language C/C++
decl-version 2.0
var-comparability none


..main():::ENTER
this_invocation_nonce
0
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
1
1
argc
1
1
argv
0x7fefffdc8
1
argv[..]
[ "./output" ]
1

..funcB():::ENTER
this_invocation_nonce
1
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
1
1
param
0x0
1
param[..]
nonsensical
2

..funcB():::EXIT0
this_invocation_nonce
1
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
1
1
param
0x0
1
param[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..funcA():::ENTER
this_invocation_nonce
2
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
1
1
param
0x0
1
param[..]
nonsensical
2

..funcA():::EXIT0
this_invocation_nonce
2
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
2
1
param
0x0
1
param[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..funcA():::ENTER
this_invocation_nonce
3
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
2
1
param
0x0
1
param[..]
nonsensical
2

..funcA():::EXIT0
this_invocation_nonce
3
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
2
1
param
0x0
1
param[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..main():::EXIT0
this_invocation_nonce
0
::iTThreads
2
1
::iRThreads
1
1
::data1Value
1
1
::data2Value
2
1
argc
1
1
argv
0x7fefffdc8
1
argv[..]
[ "./output" ]
1
return
0
1
