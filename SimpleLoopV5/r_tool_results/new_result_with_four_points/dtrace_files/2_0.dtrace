input-language C/C++
decl-version 2.0
var-comparability none

ppt ..thr2():::ENTER
 ppt-type enter
 variable ::a
  var-kind variable
  rep-type int
  dec-type int
 variable ::b
  var-kind variable
  rep-type int
  dec-type int
 variable ::c
  var-kind variable
  rep-type int
  dec-type int
 variable ::mutex
  var-kind variable
  rep-type int
  dec-type int

ppt ..thr2():::EXIT0
 ppt-type subexit
 variable ::a
  var-kind variable
  rep-type int
  dec-type int
 variable ::b
  var-kind variable
  rep-type int
  dec-type int
 variable ::c
  var-kind variable
  rep-type int
  dec-type int
 variable ::mutex
  var-kind variable
  rep-type int
  dec-type int

ppt ..thr1():::ENTER
 ppt-type enter
 variable ::a
  var-kind variable
  rep-type int
  dec-type int
 variable ::b
  var-kind variable
  rep-type int
  dec-type int
 variable ::c
  var-kind variable
  rep-type int
  dec-type int
 variable ::mutex
  var-kind variable
  rep-type int
  dec-type int

ppt ..thr1():::EXIT0
 ppt-type subexit
 variable ::a
  var-kind variable
  rep-type int
  dec-type int
 variable ::b
  var-kind variable
  rep-type int
  dec-type int
 variable ::c
  var-kind variable
  rep-type int
  dec-type int
 variable ::mutex
  var-kind variable
  rep-type int
  dec-type int

ppt ..main():::ENTER
 ppt-type enter
 variable ::a
  var-kind variable
  rep-type int
  dec-type int
 variable ::b
  var-kind variable
  rep-type int
  dec-type int
 variable ::c
  var-kind variable
  rep-type int
  dec-type int
 variable ::mutex
  var-kind variable
  rep-type int
  dec-type int

ppt ..main():::EXIT0
 ppt-type subexit
 variable ::a
  var-kind variable
  rep-type int
  dec-type int
 variable ::b
  var-kind variable
  rep-type int
  dec-type int
 variable ::c
  var-kind variable
  rep-type int
  dec-type int
 variable ::mutex
  var-kind variable
  rep-type int
  dec-type int
 variable return
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_32_0():::ENTER
 ppt-type enter
 variable ::a
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_32_0():::EXIT0
 ppt-type subexit
 variable ::a
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_33_1():::ENTER
 ppt-type enter
 variable ::b
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_33_1():::EXIT0
 ppt-type subexit
 variable ::b
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_33_2():::ENTER
 ppt-type enter
 variable ::a
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_33_2():::EXIT0
 ppt-type subexit
 variable ::a
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_34_3():::ENTER
 ppt-type enter
 variable ::c
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_34_3():::EXIT0
 ppt-type subexit
 variable ::c
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_34_4():::ENTER
 ppt-type enter
 variable ::b
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_34_4():::EXIT0
 ppt-type subexit
 variable ::b
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_35_5():::ENTER
 ppt-type enter
 variable ::c
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_35_5():::EXIT0
 ppt-type subexit
 variable ::c
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_48_6():::ENTER
 ppt-type enter
 variable ::a
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_48_6():::EXIT0
 ppt-type subexit
 variable ::a
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_48_7():::ENTER
 ppt-type enter
 variable ::b
  var-kind variable
  rep-type int
  dec-type int

ppt ..main.c_48_7():::EXIT0
 ppt-type subexit
 variable ::b
  var-kind variable
  rep-type int
  dec-type int

input-language C/C++
decl-version 2.0
var-comparability none

..thr2():::ENTER
this_invocation_nonce
0
::a
1
1
::b
2
1
::c
3
1
::mutex
1
1

..thr2():::EXIT0
this_invocation_nonce
0
::a
1
1
::b
2
1
::c
3
1
::mutex
1
1

..thr2():::ENTER
this_invocation_nonce
0
::a
1
1
::b
2
1
::c
3
1
::mutex
0
1

..thr2():::EXIT0
this_invocation_nonce
0
::a
1
1
::b
2
1
::c
3
1
::mutex
0
1

..thr2():::ENTER
this_invocation_nonce
0
::a
1
1
::b
2
1
::c
3
1
::mutex
0
1

..thr2():::EXIT0
this_invocation_nonce
0
::a
1
1
::b
2
1
::c
3
1
::mutex
0
1

