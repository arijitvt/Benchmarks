input-language C/C++
decl-version 2.0
var-comparability none

ppt ..deposit():::ENTER
  ppt-type enter
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..deposit():::EXIT0
  ppt-type subexit
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..withdraw():::ENTER
  ppt-type enter
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..withdraw():::EXIT0
  ppt-type subexit
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..check_result():::ENTER
  ppt-type enter
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..check_result():::EXIT0
  ppt-type subexit
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable arg
    var-kind variable
    rep-type hashcode
    dec-type void*
    flags is_param 
  variable arg[..]
    var-kind array
    enclosing-var arg
    array 1
    rep-type hashcode[]
    dec-type void[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type void*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type void[]

ppt ..main():::ENTER
  ppt-type enter
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::x
    var-kind variable
    rep-type int
    dec-type int
  variable ::y
    var-kind variable
    rep-type int
    dec-type int
  variable ::z
    var-kind variable
    rep-type int
    dec-type int
  variable ::balance
    var-kind variable
    rep-type int
    dec-type int
  variable ::deposit_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable ::withdraw_done
    var-kind variable
    rep-type boolean
    dec-type bool
  variable return
    var-kind variable
    rep-type int
    dec-type int

input-language C/C++
decl-version 2.0
var-comparability none


..main():::ENTER
this_invocation_nonce
0
::x
0
1
::y
0
1
::z
0
1
::balance
0
1
::deposit_done
0
1
::withdraw_done
0
1

..check_result():::ENTER
this_invocation_nonce
1
::x
4
1
::y
5
1
::z
7
1
::balance
4
1
::deposit_done
0
1
::withdraw_done
0
1
arg
0x0
1
arg[..]
nonsensical
2

..check_result():::EXIT0
this_invocation_nonce
1
::x
4
1
::y
5
1
::z
7
1
::balance
4
1
::deposit_done
0
1
::withdraw_done
0
1
arg
0x0
1
arg[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..withdraw():::ENTER
this_invocation_nonce
2
::x
4
1
::y
5
1
::z
7
1
::balance
4
1
::deposit_done
0
1
::withdraw_done
0
1
arg
0x0
1
arg[..]
nonsensical
2

..withdraw():::EXIT0
this_invocation_nonce
2
::x
4
1
::y
5
1
::z
7
1
::balance
-3
1
::deposit_done
0
1
::withdraw_done
1
1
arg
0x0
1
arg[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..deposit():::ENTER
this_invocation_nonce
3
::x
4
1
::y
5
1
::z
7
1
::balance
-3
1
::deposit_done
0
1
::withdraw_done
1
1
arg
0x0
1
arg[..]
nonsensical
2

..deposit():::EXIT0
this_invocation_nonce
3
::x
4
1
::y
5
1
::z
7
1
::balance
2
1
::deposit_done
1
1
::withdraw_done
1
1
arg
0x0
1
arg[..]
nonsensical
2
return
0x0
1
return[..]
nonsensical
2

..main():::EXIT0
this_invocation_nonce
0
::x
4
1
::y
5
1
::z
7
1
::balance
2
1
::deposit_done
1
1
::withdraw_done
1
1
return
0
1
