Daikon version 5.0.0, released January 3, 2014; http://pag.csail.mit.edu/daikon.
Reading declaration files [4:09:52 PM]:                                                                                                                                                                                                                                Processing trace data; reading 3 dtrace files:
[4:09:52 PM]: Finished reading 2.dtrace                                        
                                                                               ===========================================================================
..main():::ENTER
::data1 == ::data2
::data1 == 0
===========================================================================
..main():::EXIT
return == orig(::data1)
return == orig(::data2)
::data1 == 16
::data2 == 5
return == 0
===========================================================================
..main.c_10_0():::ENTER
::data1 one of { 10, 15 }
===========================================================================
..main.c_10_0():::EXIT
::data1 == orig(::data1)
::data1 one of { 10, 15 }
===========================================================================
..main.c_10_1():::ENTER
::data1 one of { 10, 15 }
===========================================================================
..main.c_10_1():::EXIT
::data1 one of { 11, 16 }
::data1 > orig(::data1)
===========================================================================
..main.c_14_2():::ENTER
::data2 one of { 4, 10 }
===========================================================================
..main.c_14_2():::EXIT
::data2 == orig(::data2)
::data2 one of { 4, 10 }
===========================================================================
..main.c_14_3():::ENTER
::data2 one of { 4, 10 }
===========================================================================
..main.c_14_3():::EXIT
::data2 one of { 5, 11 }
::data2 > orig(::data2)
===========================================================================
..main.c_22_4():::ENTER
::data1 one of { 10, 11 }
===========================================================================
..main.c_22_4():::EXIT
::data1 == orig(::data1)
::data1 one of { 10, 11 }
===========================================================================
..main.c_22_5():::ENTER
::data1 one of { 10, 11 }
===========================================================================
..main.c_22_5():::EXIT
::data1 one of { 15, 16 }
::data1 > orig(::data1)
===========================================================================
..main.c_26_6():::ENTER
::data2 one of { 10, 11 }
===========================================================================
..main.c_26_6():::EXIT
::data2 == orig(::data2)
::data2 one of { 10, 11 }
===========================================================================
..main.c_26_7():::ENTER
::data2 one of { 10, 11 }
===========================================================================
..main.c_26_7():::EXIT
::data2 one of { 4, 5 }
::data2 < orig(::data2)
===========================================================================
..main.c_38_8():::ENTER
::data1 == 0
===========================================================================
..main.c_38_8():::EXIT
::data1 == 10
===========================================================================
..main.c_39_9():::ENTER
::data2 == 0
===========================================================================
..main.c_39_9():::EXIT
::data2 == 10
===========================================================================
..main.c_47_10():::ENTER
::data1 == 16
===========================================================================
..main.c_47_10():::EXIT
::data1 == orig(::data1)
::data1 == 16
===========================================================================
..thread1():::ENTER
::data1 == ::data2
::data1 == 10
===========================================================================
..thread1():::EXIT
::data1 one of { 11, 16 }
::data2 one of { 5, 11 }
::data1 >= ::data2
::data1 > orig(::data1)
::data2 != orig(::data1)
===========================================================================
..thread2():::ENTER
::data1 one of { 10, 11 }
::data2 one of { 10, 11 }
::data1 >= ::data2
===========================================================================
..thread2():::EXIT
::data1 one of { 15, 16 }
::data2 one of { 4, 5 }
::data1 > ::data2
::data1 > orig(::data1)
::data1 > orig(::data2)
::data2 < orig(::data1)
::data2 < orig(::data2)
Exiting Daikon.
